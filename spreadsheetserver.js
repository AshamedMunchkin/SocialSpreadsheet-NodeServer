// Generated by CoffeeScript 1.6.2
var Connection, SpreadsheetDatabase, SpreadsheetServer, async, net;

async = require('async');

net = require('net');

SpreadsheetDatabase = require('./spreadsheetdatabase');

Connection = require('./connection');

SpreadsheetServer = (function() {
  function SpreadsheetServer(port) {
    var server,
      _this = this;

    this.editSessions = [];
    this.spreadsheetDatabase = new SpreadsheetDatabase();
    server = net.createServer(function(socket) {
      return new Connection(socket, _this).start();
    });
    server.listen(port);
    console.log('Spreadsheet Server running');
  }

  SpreadsheetServer.prototype.create = function(connection, filename, password) {
    var _this = this;

    return async.auto({
      getSpreadsheetId: [
        function(callback) {
          return _this.spreadsheetDatabase.getSpreadsheetId(filename, function(id) {
            var error;

            if (id !== 0) {
              error = {
                code: 'FAIL',
                message: 'The spreadsheet already exists.'
              };
            }
            return callback(error);
          });
        }
      ],
      createSpreadsheet: [
        'getSpreadsheetId', function(callback) {
          return _this.spreadsheetDatabase.createSpreadsheet(filename, password, function() {
            return callback();
          });
        }
      ],
      createOk: [
        'createSpreadsheet', function(callback) {
          connection.sendMessage("CREATE OK\nName:" + filename + "\nPassword:" + password + "\n");
          return callback();
        }
      ]
    }, function(error) {
      switch (false) {
        case !(error == null):
          break;
        default:
          return connection.sendMessage("CREATE FAIL\nName:" + filename + "\n" + error.message + "\n");
      }
    });
  };

  SpreadsheetServer.prototype.join = function(connection, filename, password) {
    var _this = this;

    return async.auto({
      getSpreadsheetId: [
        function(callback) {
          return _this.spreadsheetDatabase.getSpreadsheetId(filename, function(id) {
            var error;

            if (id === 0) {
              error = {
                code: 'FAIL',
                message: 'Spreadsheet does not exist.'
              };
            }
            return callback(error, id);
          });
        }
      ],
      isPasswordCorrect: [
        'getSpreadsheetId', function(callback, results) {
          return _this.spreadsheetDatabase.getSpreadsheetPassword(results.getSpreadsheetId, function(spreadsheetPassword) {
            var correct, error;

            correct = password === spreadsheetPassword;
            if (!correct) {
              error = {
                code: 'FAIL',
                message: 'Incorrect password.'
              };
            }
            return callback(error);
          });
        }
      ],
      getSpreadsheetXml: [
        'isPasswordCorrect', function(callback, results) {
          return _this.spreadsheetDatabase.getSpreadsheetXml(results.getSpreadsheetId, function(xml) {
            return callback(null, xml);
          });
        }
      ],
      createEditSession: [
        'isPasswordCorrect', function(callback) {
          var _base, _ref;

          if ((_ref = (_base = _this.editSessions)[filename]) == null) {
            _base[filename] = {
              version: 1,
              dones: [],
              clients: []
            };
          }
          return callback();
        }
      ],
      getVersion: [
        'createEditSession', function(callback) {
          return callback(null, _this.editSessions[filename].version);
        }
      ],
      addClient: [
        'createEditSession', function(callback) {
          _this.editSessions[filename].clients.push(connection);
          return callback();
        }
      ],
      joinOk: [
        'getSpreadsheetXml', 'getVersion', function(callback, results) {
          connection.sendMessage("JOIN OK\nName:" + filename + "\nVersion:" + results.getVersion + "\nLength:" + results.getSpreadsheetXml.length + "\n" + results.getSpreadsheetXml + "\n");
          return callback();
        }
      ]
    }, function(error) {
      switch (false) {
        case !(error == null):
          break;
        default:
          return connection.sendMessage("JOIN FAIL\nName:" + filename + "\n" + error.message + "\n");
      }
    });
  };

  SpreadsheetServer.prototype.change = function(connection, filename, version, cell, contents) {
    var _this = this;

    return async.auto({
      checkName: [
        function(callback) {
          return callback(_this.checkName(connection, filename));
        }
      ],
      checkVersion: [
        'checkName', function(callback) {
          return callback(_this.checkVersion(version, filename));
        }
      ],
      changeCell: [
        'checkVersion', function(callback) {
          return _this.spreadsheetDatabase.changeCell(filename, cell, contents, function(done) {
            return callback(null, done);
          });
        }
      ],
      pushDone: [
        'changeCell', function(callback, results) {
          _this.editSessions[filename].dones.push(results.changeCell);
          return callback();
        }
      ],
      incrementVersion: [
        'checkVersion', function(callback) {
          return callback(null, ++_this.editSessions[filename].version);
        }
      ],
      changeOk: [
        'incrementVersion', function(callback, results) {
          connection.sendMessage("CHANGE OK\nName:" + filename + "\nVersion:" + results.incrementVersion + "\n");
          return callback();
        }
      ],
      update: [
        'incrementVersion', function(callback, results) {
          return _this.update(connection, filename, results.incrementVersion, cell, contents, function() {
            return callback();
          });
        }
      ]
    }, function(error) {
      switch (false) {
        case !(error == null):
          break;
        case error.code !== 'FAIL':
          return connection.sendMessage("CHANGE FAIL\nName:" + filename + "\n" + error.message + "\n");
        default:
          return connection.sendMessage("CHANGE WAIT\nName:" + filename + "\nVersion:" + error.version + "\n");
      }
    });
  };

  SpreadsheetServer.prototype.undo = function(connection, filename, version) {
    var _this = this;

    return async.auto({
      checkName: [
        function(callback) {
          return callback(_this.checkName(connection, filename));
        }
      ],
      checkVersion: [
        'checkName', function(callback) {
          return callback(_this.checkVersion(version, filename));
        }
      ],
      popDone: [
        'checkVersion', function(callback) {
          var done, error;

          done = _this.editSessions[filename].dones.pop();
          if (done == null) {
            error = {
              code: 'END',
              version: _this.editSessions[filename].version
            };
          }
          return callback(error, done);
        }
      ],
      changeCell: [
        'popDone', function(callback, results) {
          return _this.spreadsheetDatabase.changeCell(filename, results.popDone.cell, results.popDone.oldContents, function() {
            return callback;
          });
        }
      ],
      incrementVersion: [
        'popDone', function(callback) {
          return callback(null, ++_this.editSessions[filename].version);
        }
      ],
      undoOk: [
        'incrementVersion', function(callback, results) {
          connection.sendMessage("UNDO OK\nName:" + filename + "\nVersion:" + results.incrementVersion + "\nCell:" + results.popDone.cell + "\nLength:" + results.popDone.oldContents.length + "\n" + results.popDone.oldContents + "\n");
          return callback();
        }
      ],
      update: [
        'incrementVersion', function(callback, results) {
          return _this.update(connection, filename, results.incrementVersion, results.popDone.cell, results.popDone.oldContents, function() {
            return callback();
          });
        }
      ]
    }, function(error) {
      switch (false) {
        case !(error == null):
          break;
        case error.code !== 'FAIL':
          return connection.sendMessage("UNDO FAIL\nName:" + filename + "\n" + error.message + "\n");
        case error.code !== 'WAIT':
          return connection.sendMessage("UNDO WAIT\nName:" + filename + "\nVersion:" + error.version + "\n");
        default:
          return connection.sendMessage("UNDO END\nName:" + filename + "\nVersion:" + error.version + "\n");
      }
    });
  };

  SpreadsheetServer.prototype.save = function(connection, filename) {
    var _this = this;

    return async.auto({
      checkName: [
        function(callback) {
          return callback(_this.checkName(connection, filename));
        }
      ],
      saveOk: [
        function(callback) {
          return connection.sendMessage("SAVE OK\nName:" + filename + "\n");
        }
      ]
    }, function(error) {
      switch (false) {
        case !(error == null):
          break;
        default:
          return connection.sendMessage("SAVE FAIL\nName:" + filename + "\n" + error.message + "\n");
      }
    });
  };

  SpreadsheetServer.prototype.leave = function(connection, filename) {
    this.editSessions[filename].clients.splice(this.editSessions[filename].clients.indexOf(connection), 1);
    if (this.editSessions[filename].clients.length === 0) {
      return this.editSessions.splice(this.editSessions.indexOf(filename), 1);
    }
  };

  SpreadsheetServer.prototype.checkName = function(connection, filename) {
    var error;

    if (this.editSessions[filename].clients.indexOf(connection) === -1) {
      error = {
        code: 'FAIL',
        message: 'You are not connected to that spreadsheet.'
      };
    }
    return error;
  };

  SpreadsheetServer.prototype.checkVersion = function(version, filename) {
    var correctVersion, error;

    correctVersion = this.editSessions[filename].version;
    console.log("Version: " + version);
    console.log("Correct Version: " + correctVersion);
    console.log(version === correctVersion.toString());
    if (version !== correctVersion.toString()) {
      error = {
        code: 'WAIT',
        version: correctVersion
      };
    }
    return error;
  };

  SpreadsheetServer.prototype.update = function(connection, filename, version, cell, contents, callback) {
    var updateMessage;

    updateMessage = "UPDATE\nName:" + filename + "\nVersion:" + version + "\nCell:" + cell + "\nLength:" + contents.length + "\n" + contents + "\n";
    return async.each(this.editSessions[filename].clients, function(peer, callback) {
      if (peer === connection) {
        return;
      }
      peer.sendMessage(updateMessage);
      return callback();
    }, function(error) {
      return callback();
    });
  };

  return SpreadsheetServer;

})();

module.exports = SpreadsheetServer;
